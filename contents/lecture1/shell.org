:PROPERTIES:
:ID:       896b3dc8-ca25-4ac7-97e0-2a172d326dc1
:END:
#+title: Shell
#+HUGO_BASE_DIR: ./
#+filetags: programming
#+LATEX_HEADER: \usepackage{bm}
#+LATEX_HEADER: \usepackage{esdiff}
#+LATEX_HEADER: \usepackage{braket}
* Important Concepts
** [[id:8b6bf606-697b-4865-8649-15df4d6ae19e][PATH Variable]]
** [[id:49fe31c7-f9f5-4fb1-aaa6-e524c0c289c0][File Permission]]
* Shell Scripting language
** Assign variable
- NO *SPACE*
#+begin_src shell
foo=bar
echo $foo
#+end_src

#+RESULTS:
: bar
*** Reserved variables
- ~$0~ name of func
- The arguments by defaults are ~$1~, ~$2~, ...
- ~$_~ is the last argument of previous command
- ~$?~ return value of last program
- ~$#~ number  of parameters in this command
- ~$$~ gives pid
- ~$@~ expands all the arguments into a list
*** Store output of command into variable
- This works with string substitution
- uses ~()~
#+begin_src shell
foo=$(pwd);echo $foo
echo "This is also foo: $foo"
#+end_src

#+RESULTS:
| /home/yushengz/notes/wikicalibur |    |      |      |                                  |
| This                             | is | also | foo: | /home/yushengz/notes/wikicalibur |
** Spaces
- Reserved for separating arguments
- Use them carefully.

** Strings
- Both ~'~ and ~"~ works
- Use ~"~ to expand the variable inside the string
#+begin_src shell
foo=bar
astr="Value foo is $foo"
echo $astr
astr='Value foo is $foo'
echo $astr
#+end_src

#+RESULTS:
| Value | foo | is | bar  |
| Value | foo | is | $foo |
** Define function
#+begin_src sh
mcd () {
    mkdir -p "$1"
    cd "$1"
}
#+end_src
** Array
#+begin_src  shell
mylist=(1 2 3 4)
echo $mylist[@]
echo $mylist[1]
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |
| 1 |   |   |   |
** For loop
#+begin_src  shell
mylist=(1 2 3 4 5)

for ii in $mylist;
          do
              echo $ii
          done
#+end_src

#+RESULTS:
| 1 |
| 2 |
| 3 |
| 4 |
| 5 |

** Process substitution
- also uses ~()~
#+begin_src shell
cat <(ls) <(ls ..)
#+end_src

** Shell globbing
- ~ls file?~ ? will expand to one character
- ~ls file*~ * will expand to any number of characters
- ~ls file{ending1,ending2}~ it will expand to ~ls fileending1 fileending2~
- The above will also work with multiple curly braces and expand with continuous
  #+begin_src shell
echo Mynameis{Yusheng,Nono}andIlovenumbers{1..9}
  #+end_src

  #+RESULTS:
  : MynameisYushengandIlovenumbers1 MynameisYushengandIlovenumbers2 MynameisYushengandIlovenumbers3 MynameisYushengandIlovenumbers4 MynameisYushengandIlovenumbers5 MynameisYushengandIlovenumbers6 MynameisYushengandIlovenumbers7 MynameisYushengandIlovenumbers8 MynameisYushengandIlovenumbers9 MynameisNonoandIlovenumbers1 MynameisNonoandIlovenumbers2 MynameisNonoandIlovenumbers3 MynameisNonoandIlovenumbers4 MynameisNonoandIlovenumbers5 MynameisNonoandIlovenumbers6 MynameisNonoandIlovenumbers7 MynameisNonoandIlovenumbers8 MynameisNonoandIlovenumbers9

** Repeat last command
- ~!!~
- ~sudo !!~ use sudo with last command
** Concatenate commands
#+begin_src  shell
 false ; echo "see previous command"
#+end_src

#+RESULTS:
: see previous command
* [[id:e9644102-0916-444a-82f1-3909e08b2291][Linux Commands]]
* Misc
** Sys folder
- In folder ~sys~ we have kernel variables
** Sudo vs su
- ~sudo~ will run the command as a superuser. But if you have ~>~ to rewire the
  output the rewiring procedure will not be in superuser privilege.
- Instead you want to do ~echo "something" | sudo tee filename.txt~
- Alternative is to run ~su~ first and elevate the terminal to superuser
  entirely, but that's generally not safe.
* Reference:
** Videos [2/2]
- [X] [[https://missing.csail.mit.edu/2020/course-shell/][Overview]]
- [X] [[https://missing.csail.mit.edu/2020/shell-tools/][Specifically shell]]
** Sites
- [[https://www.shellscript.sh/]]
- [[https://github.com/jlevy/the-art-of-command-line/blob/master/README.md]]
