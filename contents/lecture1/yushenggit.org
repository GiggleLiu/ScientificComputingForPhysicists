
#+title: Git
#+HUGO_BASE_DIR: ./
#+filetags: programming
#+LATEX_HEADER: \usepackage{bm}
#+LATEX_HEADER: \usepackage{esdiff}
#+LATEX_HEADER: \usepackage{braket}
* Reference [0/0]:
- [[https://csdiy.wiki/%E5%BF%85%E5%AD%A6%E5%B7%A5%E5%85%B7/Git/][Guiding page]]
- [[https://git-scm.com/docs][Documentation for commands]]
- [X] [[https://missing.csail.mit.edu/2020/version-control/][Missing semester video]]
- [X] [[https://git-scm.com/book/en/v2]]

** Learn Git with Game
- [[https://learngitbranching.js.org/?locale=zh_CN]]
** Visualization
- [[https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1][Visualization of Commands]]
** Panic
- [[https://ohshitgit.com/]]

* Content
** Intro to git
*** Git is distributed
- Git is distributed in the sense that every user's computer has a full copy of
  the project. At the failure of one machine, the project is still around.

*** Why is git created
- Git originated because bitkeeper refused to give linux the free of charge
  use case.

*** What's Git designed for
- Git is designed for *large project* with *many parallel development branches*.

*** Data structure difference between other VCS
**** How are changes documented
- Other VCS stores files with initial files plus changes over time
- Git stores files with the entire file every time it detects a change in the
  collection of files.
- This is helpful for branching.

**** Almost everything is local
- You can commit to local branches and then push those to server.
- The same applies with checking the history etc.

**** Integrity guaranteed by checksum
- Every change every file will be accompanied with a SHA1 checksum hash.

**** Git generally only adds data
- This makes losing data very hard.

**** Three states of file
- Modified: dangerous changed but not recorded could be lost easily
- Staged: mark a file to be added into the next snapshot. File is now in [[id:0d4d6c6c-1c92-4009-958c-9038b50ab087][Staging area]]
- Committed: Snapshot already taken for the file(s)

*** Data model of git
- Files and folders are represented by ~trees~ and ~blobs~
- Git tracks the state of your project with [[id:4999823b-e1b4-4d65-869e-7e87b825c3df][Directed Acyclic Graph]]
  1) Node is a snapshot of your project
  2) A Node points to another node which is its ~parent~. Content of the
     children node is modified from that of the parent node
  3) ASCII art representation, circles are nodes
      o <-- o <-- o <-- o
            ^
             \
              --- o <-- o

**** Data structure in terms of C objects
1) ~blob(file)~ is just an array of byte
2) ~tree(folder)~ is a ~map<string, tree/blob>~. Meaning it contains either
   other folders and/or files
3) ~commit~ is a ~struct~ which contains
   a) parents: array of ~commit~
   b) author: string
   c) message: string
   d) snapshot: ~tree~ (sha1 of the actual tree)
4) ~reference~ is a ~map<string,string>~
   a) the first string is human readable name for commit title
   b) the second string is the hash of a snapshot
   c) It facilitates fast look up of commits

**** How are these data structures stored on disk?
- You treat all the three mentioned data structures as an ~object~
- You get a container of objects which is ~<sha1-val,object>~
- You use the following two functions to store and load an object
  #+begin_src
   objects = <map,object>

   def store(object):
       id = sha1(object)
       objects[id] = object

   def load(id):
       return objects[id]
  #+end_src

*** Configuring git
- Configs
  1) Global use ~/.gitconfig~
  2) Repo specific use ~.git/config~
  3) Repo specific config file will overwrite the global one
- How to view your current config
  ~$ git config --list --show-origin~
- Config editor
  ~$ git config --global core.editor emacs~

** Working with git
- [[https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things#_undoing][Undoing things, consider do this first]]
- If interested in hosting own git, read Chapter 4 of gitbook
** Commands
- [[id:644f0d50-59c1-44a0-beef-959e1a4c845a][Magit]]
*** Initialize Repo
- Initialize a folder to a git repo
- ~git init~

*** Add file to staging area
- Tell git to include this changed file in the next snapshot to submit.
- ~git add -p <filename>~ let's you *interactively select* which part you want
  to commit in the next commit.

*** Make a commit
- Tell git to take a snapshot of staged files with selected file
- ~git commit -m <message>~
**** Data visualization of commit
- Single commit
  #+DOWNLOADED: https://git-scm.com/book/en/v2/images/commit-and-tree.png @ 2022-07-25 14:10:51
  [[file:../../notes/imgs/pdfs/Data_Model_of_Git/20220725-141051_commit-and-tree.png]]
- Multiple commits
  #+DOWNLOADED: https://git-scm.com/book/en/v2/images/commits-and-parents.png @ 2022-07-25 14:11:17
  [[file:../../notes/imgs/pdfs/Data_Model_of_Git/20220725-141117_commits-and-parents.png]]
- It points to a snapshot of the project
**** Commit messages
***** Avoid trailing whitespaces
- ~git diff --check~ will show you whether you have those
***** Commit in bite sizes
- Make things clear what each commit is doing
- If the same file is changed at two places for different purposes, use ~git add
  --patch~ to avoid putting them into same commit.
*** To fix a commit
- ~git commit --amend~
*** View commit Logs
- ~git log~
- Shows a flattened log of history
- ~git log <branch_name> --not <other branch>~ will show you commits in first
  branch but not in second.
*** Branching
- ~git branch branch_name~ creates a new branch, but it does not switch to it
- If you want to create branch and checkout at the same time ~git checkout -b
  branchname~
**** Special Branches
***** Master
- Default branch
***** HEAD
- Pointer to a *staged* branch.
- That branch is the one you are currently *on*.
- It will be different from your working directory if you made modifications.

**** Why is branch switching in git fast?
- *Branch is just a pointer* to different commits.
- To determine which branch you are working on, ~HEAD~ is used
- Switching branch is just switch which branch ~HEAD~ points to.
**** Cost of creating a branch
- Just writes $41$ characters to a new file
- $40$ characters for $SHA-1$ checksum of commit. $1$ character for newline.

**** Display branches
- ~git branch~
- ~*~ denotes the ~HEAD~
- ~git branch --merged~: shows all branches *merged* into current branch.
- ~git branch --no-merged~: shows all branches *not merged* into current branch.

**** Rename branch
- ~git branch --move <old branch name> <new branch name>~
- Don't forget to ~git push --set-upstream origin <new branch name>~ and ~git
  push origin --delete <old branch name>~

**** How to use branch in real world
- Basic idea: make your branches represent different levels of code quality
  #+DOWNLOADED: https://git-scm.com/book/en/v2/images/lr-branches-2.png @ 2022-07-29 14:27:05
  [[file:../../notes/imgs/pdfs/Commands_in_Git/20220729-142705_lr-branches-2.png]]
  1) Ready to ship / No bug
  2) Development / Might need testing
  3) Others

**** Remote branch
- Get pointer on remote
  1) ~git remote show <remote>~
  2) ~git ls-remote <remote~

***** Track branch
- Setup pairing between local branch and remote branch
- Makes operation easier, don't have to type remote branch every time you merge
- ~git checkout --track <remote>/<remote branch>~ when trying to assign local
  branch a remote branch pairing
- ~git branch -u <remote>/<remote branch>~ when setting a pairing explicitly.
- ~git branch -vv~ will show you the pairing that's setup already

***** Delete remote branch
- ~git push origin --delete <branchname>~


**** Rebase
- Basically clone a child and all its descendents and assign new parent to that
  child
- In case of divergent branch
- reapply all commits after divergent point to the other branch
- ~git checkout experiment~ and then ~git rebase master~
  #+DOWNLOADED: https://git-scm.com/book/en/v2/images/basic-rebase-3.png @ 2022-07-31 13:44:48
  [[file:../../notes/imgs/pdfs/Commands_in_Git/20220731-134448_basic-rebase-3.png]]
- After fixing everything just merge ~master~ into ~experiment~
- You will have a cleaner history compare to a three way merge

***** Rebase of branch that stems from another branch

#+DOWNLOADED: https://git-scm.com/book/en/v2/images/interesting-rebase-2.png @ 2022-07-31 13:49:30
[[file:../../notes/imgs/pdfs/Commands_in_Git/20220731-134930_interesting-rebase-2.png]]
- ~git rebase <accept branch> <first diff branch> <target branch>~
- ~git rebase master server client~

***** WARNING!! Follow this rule
- *ONLY REBASE WITH BRANCHES WORKED BY YOU ALONE*
- *NEVER REBASE WORK THAT IS ON A REMOTE SERVER ALREADY*
- If catastrophe did happen ~git pull --rebase~ for someone who sees the remote
  has been rebased.

*** Merging
- ~git merge <modified branch>~, merge into the current branch.
**** Different types of merging
1) Fast-forward. *No divergence*, current branch is the parent of ~modified branch~.
2) If parallel development is there, we may face merge conflict.
   a) If no conflict, git creates a new commit ~merge commit~ and moves ~master~
      branch to point to this commit.
      #+DOWNLOADED: https://git-scm.com/book/en/v2/images/basic-merging-2.png @ 2022-07-26 14:45:03
      [[file:../../notes/imgs/pdfs/Commands_in_Git/20220726-144503_basic-merging-2.png]]
   b) You could either use ~Magit~ to resolve the conflict or use ~git
      mergetool~ which let's you choose between ~vimdiff~ or other tools to
      resolve conflict. In ~magit~, you could see files marked by ~unmerged~ if
      they have conflicts within. Hit return while pointing to those file.

**** After merging
- Delete the branch because you no longer needs it.

**** Squash
- Compress multiple commits into one and apply it to current branch
- ~git merge --squash <featureB>~
- In effect, it's like taking work from ~featureB~ and "rebase" it on another
  branch.
  #+DOWNLOADED: https://git-scm.com/book/en/v2/images/public-small-3.png @ 2022-08-03 14:54:55
  [[file:../../notes/imgs/pdfs/Commands_in_Git/20220803-145455_public-small-3.png]]


**** When to merge master branch
- Don't merge local branch into master branch hastely
- First push local branch to remote branch (not master). Wait for the remote
  master is updated and etc.
- Some of your change in the local branch might need to be cherry-picked etc.
  Mergeing local master hastely will result in nasty rewinding later.
- Finally, sync the local master with remote master
*** Checkout
- Change between branch
- Under the hood, moves the ~HEAD~ and then reverts the files' states to those
  in the snapshot of new branch.
- ~git checkout branch_name/hash_of_branch~

**** Warning!
- Not committed work will be lost.

**** Throwing away changes in working directory
- ~git checkout filename~

*** Diff
- Show difference of a file between two snapshots
- ~git diff~ will only show the modifications in the working directory compared
  to the last staged version
- ~git diff --staged~ will show the staged change.
- ~git diff hash1 (hash2) filename~ you may not need to provide (hash2)
- ~git diff <b1>...<b2>~ shows difference between the b2 and its common ancestor with b1


*** Git remote
- ~git remote~ lists all the remote repo git is aware of.
- Adding remote ~git remote add <name> <url>~
- You could get multiple remotes . Just to *separate out visibility of
  code* submitted.
**** Setup tracking remote branch
- Let git know which branch on remote to compare to by default in case a
  push/pull needs to happen.
- ~git branch --set-upstream-to=origin/master~
**** Get work from remote
1) Checkout branch directly from remote
   - ~git checkout -b <new branch name locally> <remote>/<remote branch name>~
2) Merge with current working branch
   - ~git merge <remote>/<remote branch>~

*** Git fetch
- fetches update on the server
- Moves remote pointer on local machine to correct space.
#+DOWNLOADED: https://git-scm.com/book/en/v2/images/remote-branches-2.png @ 2022-07-30 14:00:49
[[file:../../notes/imgs/pdfs/Commands_in_Git/20220730-140049_remote-branches-2.png]]

#+DOWNLOADED: https://git-scm.com/book/en/v2/images/remote-branches-3.png @ 2022-07-30 14:00:59
[[file:../../notes/imgs/pdfs/Commands_in_Git/20220730-140059_remote-branches-3.png]]

*** Git rm
- ~git rm~ will remove the file from the traced list of files and working
  directory.
- ~git rm -f~ will allow you to remove a file that is been staged already. It
  ensures that you really want to remove this file.
- ~git rm --cached~ will remove a file in the staging area but keep it on the
  working directory. It's helpful when you forgot to add it into gitignore list.

*** Git mv
- It works so that you could move a file or rename it conveniently.
*** Git push
- Send local changes to server
- ~git push <remote> <local_branch>:<remote_branch>~
  1) Note, you could in theory have different branch name in remote and local
     but synced.
*** Git pull
- The same as ~git fetch~ plus ~git merge~
- It's recommended to use fetch and merge separately

*** Git clone
- ~git clone <url> <folder_name>~
**** Project with unwanted long history
- ~git clone --shallow~  allows just download current version of project
*** Git bisect
- Binary search in commit history that something happens first

*** Git cherry pick
- ~git cherry-pick <sha1>~
  #+DOWNLOADED: https://git-scm.com/book/en/v2/images/rebasing-2.png @ 2022-08-04 14:26:07
  [[file:../../notes/imgs/pdfs/Commands_in_Git/20220804-142607_rebasing-2.png]]
- *generate a new hash*

*** Reset and restore
- Currently Magit only supports reset
- Restore is the newer command
**** Unstage file
- ~git reset~
- ~git restore --staged <file>~
**** Discard change of file
- Dangerous!
- ~git reset HEAD <file>~
- ~git restore <file>~

*** Git remote
- Tells you remote handle for your repo
- ~git remote~ *basic info*
- ~git remote -v~ *More, url etc*
- Note, you may have multiple remotes
**** Add remote
- ~git remote add <shortname> <url>~
**** Display info about remote
- ~git remote show <remote name>~
**** Rename remote
- ~git remote rename <remote name>~
**** Remove remote
- ~git remote remove <remote name>~

*** Git tag
- Tag your history
- ~git tag~ shows all tags
- ~git tag --list <pattern-for-tag>~ list all tags matching the pattern for tag
- ~git push origin <tag name>~ need to do this explicitly because remote does
  not pull tag info automatically.
- ~git push origin --tags~ pushes all unpushed tags.
- ~git tag -d <tag name>~ delete a tag
- ~git push origin --delete <tag name>~ delete tag on remote
**** Different types of tag
- ~lightweight~ much like a pointer to a commit
  1) ~git tag <tag-name>~
- ~annotated~ stored as full commit in git database. may attach a message
  1) ~git tag -a v1.4 -m "my version 1.4"~
  2) ~git tag -a v1.2 <commit hash>~ tagging specific commit
**** Checkout tag and detached HEAD state
- Sounds *dangerous*, maybe avoid
- ~git checkout <tag name>~ checkouts a commit with tag name
- When you do a commit, it will not create a branch automatically and the new
  commit will only be accessible using commit hash.
- ~git checkout -b <new branch name> <tag name>~ try this instead.

*** Git alias
- Just like shell alias
- But I would rather use magit
*** Git rerere
- REuse REcorded REsolution
- Use previous resolution to fix a conflict.
- Useful when you have a long history to be merged.
*** Git describe
- Create version number with respect to a branch
- ~git describe <branch>~

*** Git archive
- Prepares a release in a tar ball
- ~git archive master --prefix='project/' | gzip > `git describe master`.tar.gz~
*** Git shortlog
- Gets a summary of commits since a version
- ~git shortlog --no-merges master --not v1.0.1~

*** Git cat-file
- use command ~git cat-file -p~ followed with the hashed value to get content.

* Github
- Use ~Github-cli~ to manage pull request
- If your fork goes out of sync with upstream, add the upstream as remote and
  merge that into the current branch you are working on.
- In general, do not rebase.

* Example of working in group
-  [[https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project]]

* Distributed Git
- Describes different workflow styles concerning collaborator and remote repo.
- [[https://martinfowler.com/articles/branching-patterns.html][Guide for all common git workflow]]
** Centralized workflow
- This is the github fork and pull request model.
#+DOWNLOADED: https://git-scm.com/book/en/v2/images/centralized_workflow.png @ 2022-08-01 14:09:04
[[file:../../notes/imgs/pdfs/Distributed_Git/20220801-140904_centralized_workflow.png]]
** Integration-Manager workflow

#+DOWNLOADED: https://git-scm.com/book/en/v2/images/integration-manager.png @ 2022-08-01 14:10:55
[[file:../../notes/imgs/pdfs/Distributed_Git/20220801-141055_integration-manager.png]]
** Dictator and Lieutenant workflow
- For very large project
- Basically another layer of "manager" of Integration manager workflow
  #+DOWNLOADED: https://git-scm.com/book/en/v2/images/benevolent-dictator.png @ 2022-08-01 14:14:09
  [[file:../../notes/imgs/pdfs/Distributed_Git/20220801-141409_benevolent-dictator.png]]
** Send your work through email
- Generates commits into patches
- Send to public developer mailing list
- Skimmed through
- [[https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project][Last section here.]]
** Maintain repo
- Create branch for testing features
- Apply patch with ~git apply~ or ~git am~
- Test apply patch ~git apply --check~
- It's encouraged to use ~format patch~ to generate patches
